* Java高级
** 工具类:
*** Object
**** toString() 返回对象的字符串表示; 
***** 打印对象时自动调用
     #+BEGIN_SRC java
 System.out.println(a);
 System.out.println(a.toString());
 #+END_SRC
**** equals(Obj) 判断引用数据类型的
一般都是判断两个变脸的引用是否相等,但是对于String, 包装类, Date, File这些重写过equals的类除外(判断对象内容是否相等)
**** hashCode() 重写equals就要重写 hashCode算法
一般使用31
但是这个数可以通过位移的方式来处理乘法，获得一些性能上的优化，虚拟机会自动做这些优化。
#+BEGIN_EXAMPLE
The value 31 was chosen because it is an odd prime. If it were even and the multiplication overflowed, information would be lost, as multiplication by 2 is equivalent to shifting. The advantage of using a prime is less clear, but it is traditional. A nice property of 31 is that the multiplication can be replaced by a shift and a subtraction for better performance: 31 * i == (i << 5) - i. Modern VMs do this sort of optimization automatically.
#+END_EXAMPLE
**** clone()
*** String 
**** 

     


DATE  CALENDAR



* 集合
*** Map
**** HashMap
    & hashtable  enumration 
    



* 泛型
泛型类可以看做普通类的工厂

参数刷的类型 安全的类型 
** 泛型方法
泛型方法可以定义在普通类中也可以定义在泛型类中
当调用泛型方法的时候 在方法名前面的括号中放入具体的数据类型
#+BEGIN_SRC java
class ArrayAlg{
   public static <T> T getMiddle(T...a)
   {
     return a[a.length/2];
   }    
}

String middle = ArraAlg.<String>getMiddle("John", "Q", "public");
#+END_SRC
在大多数情况下方法地哦用中可以省略<SString>类型参数.编译器有足够的信息能够推断,但是比如一些晦涩的参数比如 3.14,172,0 是不容易判断的

 创建泛型对象的时候，一定要指出类型变量T的具体类型。争取让编译器检查出错误，而不是留给JVM运行的时候抛出异常
** Tip (类型变量的限定)[
有些时候要对泛型所表示的数据类型加衣约束,那比如要求出最大最小值,传入的元素至少是可比的 那就可以通过对类型变量设置限定
#+BEGIN_SRC java
pubilc static <T extends Comparable> T min(T[] a)...
#+END_SRC

注意 这里使用关键字 extends 因为T应该是被绑定类型的子类型,无论是类还是接口 extends更能表达子类型的意义(使用通配符& 实现多个限定)

 如果泛型类型的类型变量没有限定(<T>) ，那么我们就用Object作为原始类型；
 如果有限定(<T extends XClass>)，我们就XClass作为原始类型；
 如果有多个限定(<T extends XClass1&XClass2>)，我们就用第一个边界的类型变量XClass1类作为原始类型； 
    注意:为了提高效率,应该将标签接口(没有方法的接口) 放在边界列表  也就是说,如果XClass1是标签接口 把XClass2作为原始类型

** 桥方法
对于擦除后的方法,可能无法覆盖父类的方法,编译器会自动生成一个桥方法
#+BEGIN_SRC java
//对于类SonPair
class SonPair extends Pair<String>{
  public void setFirst(Stirng fir){...}
}
//.....编译器擦除后生成的是
class SonPair extends Pair{
  public void setFirst(String fir){...}
//但在父类中,需要覆盖的其实是
class Pair{
  public void setFirst(Object fir){..}
//所以 编译器回自动在SonPair中生成一个桥方法(bridge method)
public void setFirst(Object fir){
  setFirst((String) fir)
}
#+END_SRC

在这里调用子类方法来覆盖父类的方法
但是如果存在个getFirst()方法 返回值是String, 在父类中,经过擦除
public Objcet getFirst(){...}

形成相应的桥方法
public Object getFirst(){...}
但子类还存在一种方法
public String getFirst()
**** 解释:
      ① 方法签名 确实只有方法名+参数列表 。这毫无疑问！
      ② 我们绝对不能编写出方法签名一样的多个方法 。如果这样写程序，编译器是不会放过的。这也毫无疑问！
      ③ 最重要的一点是：JVM会用参数类型和返回类型来确定一个方法。 一旦编译器通过某种方式自己编译出方法签名一样的两个方法(只能编译器自己来创造这种奇迹，我们程序员却不能人为的编写这种代码)。JVM还是能够分清楚这些方法的，前提是需要返回类型不一样。



总结：泛型代码与JVM 
    ① 虚拟机中没有泛型，只有普通类和方法。
    ② 在编译阶段，所有泛型类的类型参数都会被Object或者它们的限定边界来替换。(类型擦除)
    ③ 在继承泛型类型的时候，桥方法的合成是为了避免类型变量擦除所带来的多态灾难。
    


* 文件的IO流

* File
getAbsolutePath & getPath
如果是抽象路径 getPath返回抽象路径

属性判断:canExcute,canRead,canWrite

当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件。检查文件是否存在，若不存在则创建该文件，这是单个操作，对于其他所有可能影响该文件的文件系统活动来说，该操作是不可分的。



* 流
数据的移动
** 分类
*** 按照传输单元
- 字节流 XXXInpustStream,  XXXOutputStream
- 字符流 XXXReader   XXXWriter
*** 按照流的方向 
- 输入流  流入程序   XXXInputStream  XXXReader
- 输出流  流出程序   XXXOutPutStream  XXXWriter
*** 按照功能来分
- 节点流  
可以从或向一个特定的地方（节点）读写数据。如FileReader 
#+BEGIN_EXAMPLE
文  件  *FileInputStream FileOutputStrean FileReader FileWriter 文件进行处理的节点流 
数  组  *ByteArrayInputStream  ByteArrayOutputStream  CharArrayReader  CharArrayWriter 
对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组） 
字符串  *无    无  StringReader StringWriter 对字符串进行处理的节点流 
管  道  *PipedInputStream  PipedOutputStream  PipedReader  PipedWriter 对管道进行处
理的节点流 
#+END_EXAMPLE
- 处理流
是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。
如BufferedReader。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过
其他流的多次包装，称为流的链接。 
#+BEGIN_EXAMPLE
缓冲流  *BufferedImputStrean BufferedOutputStream BufferedReader BufferedWriter ----需
要父类作为参数构造，增加缓冲功能，避免频繁读写硬盘，可以初始化缓冲数据的大小，由
于带了缓冲功能，所以就写数据的时候需要使用flush方法咯 
转换流  *InputStreamReader  OutputStreamWriter-  要inputStream 或OutputStream作为
参数，实现从字节流到字符流的转换 
数据流  *DataInputStream DataOutputStream -提供将基础数据类型写入到文件中，或者
读取出来
#+END_EXAMPLE

** 步骤
1. 搭建管道
2. 读写操作
3. 关闭流(使用finally)
** 使用mark&reset重复利用inputstream
在这篇博客中我们已经简单的知道可以通过缓存InputStream来重复利用一个InputStream，但是这种方式的缺点也是明显的，就是要缓存一整个InputStream内存压力可能是比较大的。如果第一次读取InputStream是用来判断文件流类型，文件编码等用的，往往不需要所有的InputStream的数据，或许只需要前n个字节，这样一来，缓存一整个InputStream实际上也是一种浪费。 

其实InputStream本身提供了三个接口： 
第一个，InputStream是否支持mark，默认不支持。 
Java代码  收藏代码
public boolean markSupported() {  
   return false;  
}  

第二个，mark接口。该接口在InputStream中默认实现不做任何事情。 
Java代码  收藏代码
public synchronized void mark(int readlimit) {}  

第三个，reset接口。该接口在InputStream中实现，调用就会抛异常。 
Java代码  收藏代码
public synchronized void reset() throws IOException {  
   throw new IOException("mark/reset not supported");  
}  

从三个接口定义中可以看出，首先InputStream默认是不支持mark的，子类需要支持mark必须重写这三个方法。 
第一个接口很简单，就是标明该InputStream是否支持mark。 
mark接口的官方文档解释： 
“在此输入流中标记当前的位置。对 reset 方法的后续调用会在最后标记的位置重新定位此流，以便后续读取重新读取相同的字节。 
readlimit 参数告知此输入流在标记位置失效之前允许读取许多字节。 

mark 的常规协定是：如果方法 markSupported 返回 true，则输入流总会在调用 mark 之后记住所有读取的字节，并且无论何时调用方法 reset ，都会准备再次提供那些相同的字节。但是，如果在调用 reset 之前可以从流中读取多于 readlimit 的字节，则根本不需要该流记住任何数据。” 

reset接口的官方文档解释： 

将此流重新定位到对此输入流最后调用 mark 方法时的位置。 
reset 的常规协定是： 


如果方法 markSupported 返回 true，则： 
如果创建流以来未调用方法 mark，或最后调用 mark 以来从该流读取的字节数大于最后调用 mark 时的参数，则可能抛出 IOException。 
如果未抛出这样的 IOException，则将该流重新设置为这种状态：最近调用 mark 以来（或如果未调用 mark，则从文件开始以来）读取的所有字节将重新提供给 read 方法的后续调用方，后接可能是调用 reset 时的下一输入数据的所有字节。 
如果方法 markSupported 返回 false，则： 
对 reset 的调用可能抛出 IOException。 
如果未抛出 IOException，则将该流重新设置为一种固定状态，该状态取决于输入流的特定类型和其创建方式的固定状态。提供给 read 方法的后续调用方的字节取决于特定类型的输入流。 



简而言之就是： 
调用mark方法会记下当前调用mark方法的时刻，InputStream被读到的位置。 
调用reset方法就会回到该位置。 
举个简单的例子： 
Java代码  收藏代码
String content = "BoyceZhang!";  
InputStream inputStream = new ByteArrayInputStream(content.getBytes());  
  
// 判断该输入流是否支持mark操作  
if (!inputStream.markSupported()) {  
    System.out.println("mark/reset not supported!");  
}  
int ch;    
boolean marked = false;    
while ((ch = inputStream.read()) != -1) {  
      
    //读取一个字符输出一个字符    
    System.out.print((char)ch);    
    //读到 'e'的时候标记一下  
     if (((char)ch == 'e')& !marked) {    
        inputStream.mark(content.length());  //先不要理会mark的参数  
         marked = true;    
     }    
                  
     //读到'!'的时候重新回到标记位置开始读  
      if ((char)ch == '!' && marked) {    
          inputStream.reset();    
          marked = false;  
      }    
}  
  
//程序最终输出：BoyceZhang!Zhang!  

看了这个例子之后对mark和reset接口有了很直观的认识。 
但是mark接口的参数readlimit究竟是干嘛的呢？ 
我们知道InputStream是不支持mark的。要想支持mark子类必须重写这三个方法，我想说的是不同的实现子类，mark的参数readlimit作用不尽相同。 
常用的FileInputStream不支持mark。 
1. 对于BufferedInputStream，readlimit表示：InputStream调用mark方法的时刻起，在读取readlimit个字节之前，标记的该位置是有效的。如果读取的字节数大于readlimit，可能标记的位置会失效。 

在BufferedInputStream的read方法源码中有这么一段： 
Java代码  收藏代码
} else if (buffer.length >= marklimit) {  
     markpos = -1;   /* buffer got too big, invalidate mark */  
     pos = 0;        /* drop buffer contents */  
     } else {            /* grow buffer */  

为什么是可能会失效呢？ 
因为BufferedInputStream读取不是一个字节一个字节读取的，是一个字节数组一个字节数组读取的。 
例如，readlimit=35，第一次比较的时候buffer.length=0（没开始读）<readlimit 
然后buffer数组一次读取48个字节。这时的read方法只会简单的挨个返回buffer数组中的字节，不会做这次比较。直到读到buffer数组最后一个字节（第48个）后，才重新再次比较。这时如果我们读到buffer中第47个字节就reset。mark仍然是有效的。虽然47>35。 

2. 对于InputStream的另外一个实现类：ByteArrayInputStream，我们发现readlimit参数根本就没有用，调用mark方法的时候写多少都无所谓。 
Java代码  收藏代码
public void mark(int readAheadLimit) {  
   mark = pos;  
}  
  
public synchronized void reset() {  
   pos = mark;  
}  


因为对于ByteArrayInputStream来说，都是通过字节数组创建的，内部本身就保存了整个字节数组，mark只是标记一下数组下标位置，根本不用担心mark会创建太大的buffer字节数组缓存。 

3. 其他的InputStream子类没有去总结。原理都是一样的。 

所以由于mark和reset方法配合可以记录并回到我们标记的流的位置重新读流，很大一部分就可以解决我们的某些重复读的需要。 
这种方式的优点很明显：不用缓存整个InputStream数据。对于ByteArrayInputStream甚至没有任何的内存开销。 
当然这种方式也有缺点：就是需要通过干扰InputStream的读取细节，也相对比较复杂。


** Reader应该是字符流
当时用FileReader的时候有可能是文本编码的问题 
#+BEGIN_SRC java
InputStreamReader isr = new InputStreamReader(new FileInputStream("src/Calendar/Test.txt"),"UTF-8");
#+END_SRC

*** 原文<转>BufferedReader和FileReader读取txt文件乱码
2013-08-23 18:41 2704人阅读 评论(0) 收藏 举报
今天写代码一直乱码，最后发现读取流写错了，笔记笔记。
读取txt文件乱码   
BufferedReader read = new BufferedReader(new FileReader(new File(filename)));   
  
解决办法：   
InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "UTF-8");   
BufferedReader read = new BufferedReader(isr);     
因为InputStreamReader和BufferedReader 都继承自Reader,而BufferedReader 的构造器又是Reader.   
Writer也是一样的处理  
 
附一：API中InputStreamReader介绍
public class InputStreamReader extends Reader
InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，否则可能接受平台默认的字符集。
   每次调用 InputStreamReader 中的一个 read() 方法都会导致从基础输入流读取一个或多个字节。要启用从字节到字符的有效转换，可以提前从基础流读取更多的字节，使其超过满足当前读取操作所需的字节。
为了达到最高效率，可要考虑在 BufferedReader 内包装 InputStreamReader。例如：  
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
 
   public InputStreamReader(InputStream in,Charset cs)
   创建使用给定字符集的 InputStreamReader。
 
附二：使用java的输入，输出流技术将一个文本文件的内容按行读出，每读出一行就顺序添加行号，并写入到另一个文件中。
public static void appendLineNumber(File from, File to){
  BufferedReader in = null;
  BufferedWriter out = null;
  try {
   in = new BufferedReader(new InputStreamReader(new FileInputStream(from),"UTF-8"));
   StringBuffer s = new StringBuffer();
   String t ;
   int lineNumber = 1;
   while((t=in.readLine())!=null){
    s.append(lineNumber+"");
    s.append(t);
    s.append(System.getProperty("line.separator"));
     //java可以通过System.getProperty获得系统变量的值 separator-行与行之间的分隔符
     //具体见API中System.getProperty()
    lineNumber++;
   }
   out = new BufferedWriter(new FileWriter(to));
   out.write(s.toString());
  } catch (FileNotFoundException e) {
   e.printStackTrace();
  } catch (IOException e) {
   e.printStackTrace();
  }finally{
   try {
    in.close();
    out.close();
   } catch (IOException e) {
    e.printStackTrace();
   }
  }
 }
