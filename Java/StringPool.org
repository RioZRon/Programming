JVM为了提升性能和减少内存开销，避免字符串的重复创建，其维护了一块特殊的内存空间，即字符串池（String Pool）
** 创建字符串对象:
*** 字面值的方式赋值
#+BEGIN_SRC java
String str1 = "abc";
String str2 = "abc";
//str1 == str2 ture
#+END_SRC
 1. JVM首先会去字符串池中查找是否存在"aaa"这个对象，如果不存在，则在字符串池中创建"aaa"这个对象
 2. 1. 然后将池中"aaa"这个对象的引用地址返回给字符串常量str，这样str会指向池中"aaa"这个字符串对象；
    2. 如果存在，则不创建任何对象，直接将池中"aaa"这个对象的地址返回，赋给字符串常量。
*** new关键字新建一个字符串对象
#+BEGIN_SRC java
String str1 = new String("abc");
String str2 = new String("abc");
//str1 == str2 fales
#+END_SRC
1. JVM首先在字符串池中查找有没有"aaa"这个字符串对象，
2. 1. 如果有，则不在池中再去创建"aaa"这个对象了
   2. 如果没有，则首先在字符串池中创建一个"aaa"字符串对象，
3. 然后再在堆中创建一个"aaa"字符串对象
4. 然后将堆中这个"aaa"字符串对象的地址返回赋给str3引用
5. 这样，str3指向了堆中创建的这个"aaa"字符串对象。
** 优缺点
字符串池的优点就是避免了相同内容的字符串的创建，节省了内存，省去了创建相同字符串的时间，同时提升了性能；
另一方面，字符串池的缺点就是牺牲了JVM在常量池中遍历对象所需要的时间，不过其时间成本相比而言比较低。
** intern方法
a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.
如果对象在poor里面,就返回pool里的引用,没有,就创建一个再引用
如果a.equals(b) 那么 a.intern == b.intern 
** 不会被GC回收
** 语言规范
*** 每一个字符串常量都指向字符串池中或者堆内存中的一个字符串实例；
*** 字符串对象值是固定的，一旦创建就不能再修改；
*** 字符串常量或者常量表达式中的字符串都被使用方法String.intern()在字符串池中保留了唯一的实例
** 总结
   由常量表达式计算出的字符串是在编译时进行计算,然后被当作常量；
字符串是常量，字符串池中的每个字符串对象只有唯一的一份，可以被多个引用所指向，避免了重复创建内容相同的字符串；通过字面值赋值创建的字符串对象存放在字符串池中，通过关键字new出来的字符串对象存放在堆中。
