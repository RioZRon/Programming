#+BEGIN_SRC java
public static void ma (String s){
s = "bbb";
}
public static void main(String[] args){
String str = "aaa";
ma(str);
}
#+END_SRC
str的值还是aaa 因为String是常量, 发生变化就要重新开辟内存
** 三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String
String <（StringBuffer，StringBuilder）的原因
　　　　String：字符串常量
　　　　StringBuffer：字符创变量
　　　　StringBuilder：字符创变量

从上面的名字可以看到，String是“字符创常量”，也就是不可改变的对象。对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：
#+BEGIN_SRC java
1 String s = "abcd";
2 s = s+1;
3 System.out.print(s);// result : abcd1
#+END_SRC
我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗
JVM是这样解析这段代码的：
首先创建对象s，赋予一个abcd，
然后再创建一个新的对象s用来执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，
由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多低。


而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。


** StringBuilder与 StringBuffer
　　　　StringBuilder：线程非安全的
　　　　StringBuffer：线程安全的

　　　　当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。

